A3/BackEnd

Diretório A3/BackEnd
 Este diretório contém o código responsável por ativar e rodar o servidor Back-End. Ele segue a arquitetura MVC:
Models: lidam com o banco de dados;
Views: são scripts do Front-End que trocam dados em JSON com o Back-End;
Controllers: recebem e respondem às requisições HTTP.
O arquivo principal é o “server.js”, que inicia o servidor e integra as rotas. As outras pastas estão organizadas de acordo com essa estrutura.


Primeiros Passos

Requisitos: 
- Instalar o Node dentro deste Projeto
- É necessário utilizar as versões mais atuais do  Node, para o Sistema Rodar a API Fetch devidamente.
- Express e Cors precisam ser instalados( npm install express cors ).
-Para vocês acessarem a página HTML do atendente. É só colar na URL: (http://localhost:3000/atendente/atendente.html)
-E, por fim, é necessário colocar os arquivos da pasta "Models” de Marissol (localizada no nosso repositório do GitHub). Eles são responsáveis por fazer a comunicação direta com o banco SQLite, então sem eles o sistema de consulta não vai funcionar direito. E Instalar também o pacote better-sqlite3, com o comando:(npm install better-sqlite3) no terminal desse projeto.
-Quando voces iniciaree o servidor, sempre coloquem ( node --watch "server.js")
Pasta: /Routes

Prática: Sobre as rotas, o que vocês precisam focar por agora é no arquivo `Reserve.js`, que é o código-fonte responsável por interligar as Reservas entre os três tipos de clientes do sistema. 
As demais rotas que estão na pasta são apenas preparações para implementações futuras de outros tipos de clientes. Elas **não interferem** na lógica atual da função do `cadastramentoController`, então **não precisam se preocupar com elas nesse momento**.

Conceito: A pasta Routes é responsável por coordenar o tráfego de dados no formato JSON entre as Views e os Controllers. Ela define os caminhos (endpoints) da aplicação e direciona cada requisição para a função correspondente no Controller. É uma ponte entre a entrada do usuário (Front-End) e a lógica do sistema (Back-End).
 Ela Influencia na organização da delegação das operações, garantindo que as responsabilidades sejam bem distribuídas e deixando a execução principal a cargo do “server.js”

Meu Progresso : Função Cadastrar Novas Reservas

No projeto, eu estava desenvolvendo a função do cadastroController, que seria responsável por lidar com o recebimento dos dados dos reservantes e a inserção no banco de dados SQLite.
Consegui estruturar a rota e conectar os arquivos necessários com o banco, e também estava trabalhando a lógica para receber os dados enviados via JSON da View. Inclusive a função já estava preparada para montar a query SQL e executar o comando de inserção.
O ponto em que parei foi justamente na parte final dessa função Controller:

1.Ainda precisava ajustar a forma como os dados eram validados antes de ir para o banco.(Ex:Tem mesa disponível? Então pode Cadastrar Nova Reserva..).

2.E também queria garantir que a execução da query retornasse uma resposta adequada (como confirmação de sucesso ), que depois seria enviada de volta para a View. mas ainda não avancei nessa parte.

Em resumo: Eu acredito que tive sucesso em estruturar a lógica da View do Cadastro. Porém encontrei bastante dificuldade no momento em que decidi consultar e inserir os dados na tabela Reservas sem que houvesse conflito com a chave estrangeira “mesa_id”. Então falhei em retornar uma resposta agradável para o Servidor.(Sem erros).
Por isso,eu acredito que a chave para o problema, esteja centralizada na lógica de implementação de uma função que interprete a quantidade de mesas que existe no Sistema. E comunique isso para as rota “Reserve.js” .Para que ela possa responder devidamente o Front-End.
Obs:As Views(Scripts do Front) Estão dentro da pasta “/Public/Atendente” ; “adminsTable” foi a minha tentativa de implementação da lógica “cadastrarMesas”.



